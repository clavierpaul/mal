(module $step2_eval

  (global $repl_env (mut i32) (i32.const 0))

  ;; READ
  (func $READ (param $str i32) (result i32)
    ($read_str $str)
  )

  ;; EVAL
  (func $EVAL_AST (param $ast i32 $env i32) (result i32)
    (local $res2 i64)
    (LET $res 0 $val2 0 $val3 0 $type 0 $found 0
         $ret 0 $empty 0 $current 0)

    (if (get_global $error_type) (return 0))
    (set_local $type ($TYPE $ast))

    ;;($PR_VALUE ">>> EVAL_AST ast: '%s'\n" $ast)

    ;;; switch(type)
    (block $done
      (block $default (block (block
      (br_table 2 2 2 2 2 0 1 1 1 2 2 2 2 2 2 2 $type))
      ;; symbol
      ;; found/res returned as hi 32/lo 32 of i64
      (set_local $res2 ($HASHMAP_GET $env $ast))
      (set_local $res (i32.wrap/i64 $res2))
      (set_local $found (i32.wrap/i64 (i64.shr_u $res2
                                                 (i64.const 32))))
      (if (i32.eqz $found)
          ($THROW_STR_1 "'%s' not found"
                ($to_String $ast)))
      (set_local $res ($INC_REF $res))

      (br $done))
      ;; list, vector, hashmap
      ;; MAP_LOOP_START
      (set_local $res ($MAP_LOOP_START $type))
      ;; push MAP_LOOP stack
      ;;; empty = current = ret = res
      (set_local $ret $res)
      (set_local $current $res)
      (set_local $empty $res)

      (block $done
        (loop $loop
          ;; check if we are done evaluating the source sequence
          (br_if $done (i32.eq ($VAL0 $ast) 0))

          (if (i32.eq $type (get_global $HASHMAP_T))
            (then
              (set_local $res ($EVAL ($MEM_VAL2_ptr $ast) $env)))
            (else
              (set_local $res ($EVAL ($MEM_VAL1_ptr $ast) $env))))
          (set_local $val2 $res)

          ;; if error, release the unattached element
          (if (get_global $error_type)
            (then
              ($RELEASE $res)
              (set_local $res 0)
              (br $done)))

          ;; for hash-maps, copy the key (inc ref since we are going
          ;; to release it below)
          (if (i32.eq $type (get_global $HASHMAP_T))
            (then
              (set_local $val3 $val2)
              (set_local $val2 ($MEM_VAL1_ptr $ast))
              (drop ($INC_REF $val2))))

          ;; MAP_LOOP_UPDATE
          (set_local $res ($MAP_LOOP_UPDATE $type $empty $current $val2 $val3))
          (if (i32.le_u $current (get_global $EMPTY_HASHMAP))
            ;; if first element, set return to new element
            (set_local $ret $res))
          ;; update current to point to new element
          (set_local $current $res)

          (set_local $ast ($MEM_VAL0_ptr $ast))

          (br $loop)
        )
      )
      ;; MAP_LOOP_DONE
      (set_local $res $ret)
      ;; EVAL_AST_RETURN: nothing to do
      (br $done))
      ;; default
      (set_local $res ($INC_REF $ast))
    )

    $res
  )

  (type $fnT (func (param i32) (result i32)))

  (table anyfunc
    (elem
      $add $subtract $multiply $divide))

  (func $EVAL (param $ast i32 $env i32) (result i32)
    (LET $res 0
         $ftype 0 $f_args 0 $f 0 $args 0)

    (set_local $f_args 0)
    (set_local $f 0)
    (set_local $args 0)

    (if (get_global $error_type) (return 0))

    ;;($PR_VALUE ">>> EVAL ast: '%s'\n" $ast)

    (if (i32.ne ($TYPE $ast) (get_global $LIST_T))
      (return ($EVAL_AST $ast $env)))

    ;; APPLY_LIST
    (if ($EMPTY_Q $ast)
      (return ($INC_REF $ast)))

      ;; EVAL_INVOKE
      (set_local $res ($EVAL_AST $ast $env))
      (set_local $f_args $res)

      ;; if error, return f/args for release by caller
      (if (get_global $error_type)
        (return $f_args))

      (set_local $args ($MEM_VAL0_ptr $f_args)) ;; rest
      (set_local $f ($MEM_VAL1_ptr $f_args)) ;; value

      (set_local $ftype ($TYPE $f))
      (if (i32.eq $ftype (get_global $FUNCTION_T))
        (then
          (set_local $res (call_indirect (type $fnT) $args ($VAL0 $f))))
        (else
          ($THROW_STR_1 "apply of non-function type: %d\n" $ftype)
          (set_local $res 0)))

      ($RELEASE $f_args)

    $res
  )

  ;; PRINT
  (func $PRINT (param $ast i32) (result i32)
    ($pr_str $ast 1)
  )

  ;; REPL
  (func $REP (param $line i32 $env i32) (result i32)
    (LET $mv1 0 $mv2 0 $ms 0)
    (block $done
      (set_local $mv1 ($READ $line))
      (br_if $done (get_global $error_type))

      (set_local $mv2 ($EVAL $mv1 $env))
      (br_if $done (get_global $error_type))

;;      ($PR_MEMORY -1 -1)
      (set_local $ms ($PRINT $mv2))
    )

    ;; release memory from MAL_READ and EVAL
    ($RELEASE $mv2)
    ($RELEASE $mv1)
    $ms
  )

  (func $add (param $args i32) (result i32)
    ($INTEGER
      (i32.add ($VAL0 ($MEM_VAL1_ptr $args))
               ($VAL0 ($MEM_VAL1_ptr ($MEM_VAL0_ptr $args))))))
  (func $subtract (param $args i32) (result i32)
    ($INTEGER
      (i32.sub ($VAL0 ($MEM_VAL1_ptr $args))
                 ($VAL0 ($MEM_VAL1_ptr ($MEM_VAL0_ptr $args))))))
  (func $multiply (param $args i32) (result i32)
    ($INTEGER
      (i32.mul ($VAL0 ($MEM_VAL1_ptr $args))
                 ($VAL0 ($MEM_VAL1_ptr ($MEM_VAL0_ptr $args))))))
  (func $divide (param $args i32) (result i32)
    ($INTEGER
      (i32.div_s ($VAL0 ($MEM_VAL1_ptr $args))
                 ($VAL0 ($MEM_VAL1_ptr ($MEM_VAL0_ptr $args))))))

  (func $main (result i32)
    (LET $line (STATIC_ARRAY 201)
         $res 0 $repl_env 0)

    ;; DEBUG
;;    ($printf_1 "argc: 0x%x\n" $argc)
;;    ($printf_1 "memoryBase: 0x%x\n" (get_global $memoryBase))
;;    ($printf_1 "heap_start: 0x%x\n" (get_global $heap_start))
;;    ($printf_1 "heap_end: 0x%x\n" (get_global $heap_end))
;;    ($printf_1 "mem: 0x%x\n" (get_global $mem))
;;    ($printf_1 "string_mem: %d\n" (get_global $string_mem))

    (set_global $repl_env ($HASHMAP))
    (set_local $repl_env (get_global $repl_env))

    (set_local $repl_env ($ASSOC1_S $repl_env "+" ($FUNCTION 0)))
    (set_local $repl_env ($ASSOC1_S $repl_env "-" ($FUNCTION 1)))
    (set_local $repl_env ($ASSOC1_S $repl_env "*" ($FUNCTION 2)))
    (set_local $repl_env ($ASSOC1_S $repl_env "/" ($FUNCTION 3)))

    ;;($PR_MEMORY -1 -1)

    ;; Start REPL
    (block $repl_done
      (loop $repl_loop
        (br_if $repl_done (i32.eqz ($readline "user> " $line)))
        (br_if $repl_loop (i32.eq (i32.load8_u $line) 0))
        (set_local $res ($REP $line $repl_env))
        (if (get_global $error_type)
          (then
            ($printf_1 "Error: %s\n" (get_global $error_str))
            (set_global $error_type 0))
          (else
            ($printf_1 "%s\n" ($to_String $res))))
        ($RELEASE $res)
        ;;($PR_MEMORY_SUMMARY_SMALL)
        (br $repl_loop)
      )
    )

    ($print "\n")
    ;;($PR_MEMORY -1 -1)
    0
  )


  (export "_main" (func $main))
  (export "__post_instantiate" (func $init_memory))
)

