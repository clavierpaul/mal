(module $mem
  (global $MEM_SIZE               i32 1048576)
  (global $STRING_MEM_SIZE        i32 1048576)

  (global $heap_start             (mut i32) 0)
  (global $heap_end               (mut i32) 0)

  (global $mem                    (mut i32) 0)
  (global $mem_unused_start       (mut i32) 0)
  (global $mem_free_list          (mut i32) 0)
  (global $mem_user_start         (mut i32) 0)

;;  (global $string_mem             (mut i32) 0)
;;  (global $string_mem_next        (mut i32) 0)
;;  (global $string_mem_user_start  (mut i32) 0)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; General type storage/pointer functions

  (func $VAL0_ptr (param $mv i32) (result i32)
    (i32.add $mv 4))
  (func $VAL1_ptr (param $mv i32) (result i32)
    (i32.add $mv 8))

  (func $VAL0 (param $mv i32) (result i32)
    (i32.load (i32.add $mv 4)))
  (func $VAL1 (param $mv i32) (result i32)
    (i32.load (i32.add $mv 8)))


  (func $MEM_VAL0_ptr (param $mv i32) (result i32)
    (i32.add (get_global $mem)
             (i32.mul_u (i32.load (i32.add $mv 4)) 4)))
  (func $MEM_VAL1_ptr (param $mv i32) (result i32)
    (i32.add (get_global $mem)
             (i32.mul_u (i32.load (i32.add $mv 8)) 4)))
  (func $MEM_VAL2_ptr (param $mv i32) (result i32)
    (i32.add (get_global $mem)
             (i32.mul_u (i32.load (i32.add $mv 12)) 4)))

  ;; Returns the memory index mem of mv
  ;; Will usually be used with a load or store by the caller
  (func $IDX (param $mv i32) (result i32)
    ;; MalVal memory 64 bit (2 * i32) aligned
    (i32.div_u (i32.sub_u $mv (get_global $mem)) 4))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; Returns the address of 'mem[mv_idx]'
  (func $MalVal_ptr (param $mv_idx i32) (result i32)
    ;; MalVal memory 64 bit (2 * i32) aligned
    ;;; mem[mv_idx].refcnt_type
    (i32.add (get_global $mem) (i32.mul_u $mv_idx 4)))

  ;; Returns the address of 'mem[mv_idx].refcnt_type'
  (func $MalVal_refcnt_type (param $mv_idx i32) (result i32)
    (i32.load ($MalVal_ptr $mv_idx)))

  (func $TYPE (param $mv i32) (result i32)
    ;;; type = mv->refcnt_type & 31
    (i32.and (i32.load $mv) 0x1f)) ;; 0x1f == 31

  (func $SET_TYPE (param $mv i32 $type i32)
    ;;; type = mv->refcnt_type & 31
    ;;; mv->refcnt_type += - (mv->refcnt_type & 31) + type
    (i32.store $mv (i32.or
                     (i32.and $type 0x1f) ;; 0x1f == 31
                     (i32.and (i32.load $mv) 0xffffffe1)))
  )


  (func $REFS (param $mv i32) (result i32)
    ;;; type = mv->refcnt_type & 31
    (i32.shr_u (i32.load $mv) 5)) ;; / 32

  ;; Returns the address of 'mem[mv_idx].val[val]'
  ;; Will usually be used with a load or store by the caller
  (func $MalVal_val_ptr (param $mv_idx i32 $val i32) (result i32)
    (i32.add (i32.add ($MalVal_ptr $mv_idx) 4)
             (i32.mul_u $val 4)))

  ;; Returns the value of 'mem[mv_idx].val[val]'
  (func $MalVal_val (param $mv_idx i32 $val i32) (result i32)
    (i32.load ($MalVal_val_ptr $mv_idx $val)))

  (func $MalType_size (param $type i32) (result i32)
    ;;; if (type <= 5 || type == 9 || type == 12)
    (if i32 (OR (i32.le_u $type 5)
                (i32.eq $type 9)
                (i32.eq $type 12))
      (then 2)
      (else
        ;;; else if (type == 8 || type == 10 || type == 11)
        (if i32 (OR (i32.eq $type 8)
                    (i32.eq $type 10)
                    (i32.eq $type 11))
          (then 4)
          (else 3)))))

  (func $MalVal_size (param $mv i32) (result i32)
    (local $type i32)
    (set_local $type ($TYPE $mv))
    ;; if (type == FREE_T)
    (if i32 (i32.eq $type (get_global $FREE_T))
      (then
        ;;; return (mv->refcnt_type & 0xffe0)>>5
        (i32.shr_u (i32.and (i32.load $mv) 0xffe0) 5)) ;;; / 32
      (else
        ;;; return MalType_size(type)
        ($MalType_size $type))))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; init_memory

  (func $init_memory
    (local $heap_size i32)

;;    ($print ">>> init_memory\n")

    ($init_sprintf_mem)

    ;; error_str string buffer
    (set_global $error_str (STATIC_ARRAY 100))
    ;; reader token string buffer
    (set_global $token_buf (STATIC_ARRAY 256))
    ;; printer string buffer
    (set_global $printer_buf (STATIC_ARRAY 4096))

    (set_local $heap_size (i32.add (get_global $MEM_SIZE)
                                   (get_global $STRING_MEM_SIZE)))
    (set_global $heap_start (i32.add (get_global $memoryBase)
                                     (get_global $S_STRING_END)))
    (set_global $heap_end (i32.add (get_global $heap_start)
                                   $heap_size))

    (set_global $mem (get_global $heap_start))
    (set_global $mem_unused_start 0)
    (set_global $mem_free_list 0)

;;    (set_global $string_mem (i32.add (get_global $heap_start)
;;                                     (get_global $MEM_SIZE)))
;;    (set_global $string_mem_next (get_global $string_mem))

    ;; Empty values
    (set_global $NIL
                ($ALLOC_SCALAR (get_global $NIL_T) 0))
    (set_global $FALSE
                ($ALLOC_SCALAR (get_global $BOOLEAN_T) 0))
    (set_global $TRUE
                ($ALLOC_SCALAR (get_global $BOOLEAN_T) 1))
    (set_global $EMPTY_LIST
                ($ALLOC (get_global $LIST_T)
                      (get_global $NIL) (get_global $NIL) (get_global $NIL)))
    (set_global $EMPTY_VECTOR
                ($ALLOC (get_global $VECTOR_T)
                      (get_global $NIL) (get_global $NIL) (get_global $NIL)))
    (set_global $EMPTY_HASHMAP
                ($ALLOC (get_global $HASHMAP_T)
                      (get_global $NIL) (get_global $NIL) (get_global $NIL)))

;;    ($print "<<< init_memory\n")

  )

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; memory management

  (func $ALLOC_INTERNAL (param $type i32
                               $val1 i32 $val2 i32 $val3 i32) (result i32)
    (local $prev i32 $res i32 $size i32)
    (set_local $prev (get_global $mem_free_list))
    (set_local $res (get_global $mem_free_list))
    (set_local $size ($MalType_size $type))

    (block $loop_done
      (loop $loop
        ;; res == mem_unused_start
        (if (i32.eq $res (get_global $mem_unused_start))
          (then
            ;; ALLOC_UNUSED
            ;;; if (res + size > MEM_SIZE)
            (if (i32.gt_u (i32.add $res $size) (get_global $MEM_SIZE))
              (then
                ;; Out of memory, exit
                ($print "Out of mal memory!\n")
                ($exit 1)))
            ;;; if (mem_unused_start += size)
            (set_global $mem_unused_start
                        (i32.add (get_global $mem_unused_start) $size))
            ;;; if (prev == res)
            (if (i32.eq $prev $res)
              (then
                (set_global $mem_free_list (get_global $mem_unused_start)))
              (else
                ;;; mem[prev].val[0] = mem_unused_start
                (i32.store
                  ($MalVal_val_ptr $prev 0)
                  (get_global $mem_unused_start))))
            (br $loop_done)))
        ;; if (MalVal_size(mem+res) == size)
        (if (i32.eq ($MalVal_size ($MalVal_ptr $res))
                    $size)
          (then
            ;; ALLOC_MIDDLE
            ;;; if (res == mem_free_list)
            (if (i32.eq $res (get_global $mem_free_list))
              ;; set free pointer (mem_free_list) to next free
              ;;; mem_free_list = mem[res].val[0];
              (set_global $mem_free_list ($MalVal_val $res 0)))
            ;;  if (res != mem_free_list)
            (if (i32.ne $res (get_global $mem_free_list))
              ;; set previous free to next free
              ;;; mem[prev].val[0] = mem[res].val[0]
              (i32.store ($MalVal_val_ptr $prev 0) ($MalVal_val $res 0)))
            (br $loop_done)))
        ;;; prev = res
        (set_local $prev $res)
        ;;; res = mem[res].val[0]
        (set_local $res ($MalVal_val $res 0))
        (br $loop)
      )
    )
    ;; ALLOC_DONE
    ;;; mem[res].refcnt_type = type + 32
    (i32.store ($MalVal_ptr $res) (i32.add $type 32))
    ;; set val to default val1
    ;;; mem[res].val[0] = val1
    (i32.store ($MalVal_val_ptr $res 0) $val1)
    ;;; if (type > 5 && type != 9)
    (if (AND (i32.gt_u $type 5)
             (i32.ne $type 9))
      (then
        ;; inc refcnt of referenced value
        ;;; mem[val1].refcnt_type += 32
        (i32.store ($MalVal_ptr $val1)
                   (i32.add ($MalVal_refcnt_type $val1) 32))))
    ;;; if (size > 2)
    (if (i32.gt_u $size 2)
      (then
        ;; inc refcnt of referenced value
        ;;; mem[val2].refcnt_type += 32
        (i32.store ($MalVal_ptr $val2)
                   (i32.add ($MalVal_refcnt_type $val2) 32))
        ;;; mem[res].val[1] = val2
        (i32.store ($MalVal_val_ptr $res 1) $val2)))
    ;;; if (size > 3)
    (if (i32.gt_u $size 3)
      (then
        ;; inc refcnt of referenced value
        ;;; mem[val3].refcnt_type += 32
        (i32.store ($MalVal_ptr $val3)
                   (i32.add ($MalVal_refcnt_type $val3) 32))
        ;;; mem[res].val[2] = val3
        (i32.store ($MalVal_val_ptr $res 2) $val3)))

    ;;; return mem + res
    ($MalVal_ptr $res)
  )

  (func $ALLOC_SCALAR (param $type i32 $val1 i32) (result i32)
    ($ALLOC_INTERNAL $type $val1 0 0)
  )

  (func $ALLOC (param $type i32 $val1 i32 $val2 i32 $val3 i32) (result i32)
    ($ALLOC_INTERNAL $type ($IDX $val1) ($IDX $val2) ($IDX $val3))
  )

  (func $RELEASE (param $mv i32)
    (local $idx i32 $type i32 $size i32)

    ;; Ignore NULLs
    ;;; if (mv == NULL) { return; }
    (if (i32.eqz $mv) (return))
    ;;; idx = mv - mem
    (set_local $idx ($IDX $mv))
    ;;; type = mv->refcnt_type & 31
    (set_local $type (i32.and (i32.load $mv) 0x1f)) ;; 0x1f == 31
    ;;; size = MalType_size(type)
    (set_local $size ($MalType_size $type))

    ;; DEBUG
    ;;; printf(">>> RELEASE idx: %d, type: %d, size: %d\n", idx, type, size)

    (if (i32.eq 0 $mv)
      (then
        ($print "RELEASE of NULL!\n")
        ($exit 1)))

    (if (i32.eq (get_global $FREE_T) $type)
      (then
        ($printf_2 "RELEASE of already free mv: 0x%x, idx: 0x%x\n" $mv $idx)
        ($exit 1)))
    (if (i32.lt_u ($MalVal_refcnt_type $idx) 15)
      (then
        ($printf_2 "RELEASE of unowned mv: 0x%x, idx: 0x%x\n" $mv $idx)
        ($exit 1)))

    ;; decrease reference count by one
    (i32.store ($MalVal_ptr $idx)
               (i32.sub_u ($MalVal_refcnt_type $idx) 32))

    ;; nil, false, true, empty sequences
    (if (i32.le_u $mv (get_global $EMPTY_HASHMAP))
      (then
        (if (i32.lt_u ($MalVal_refcnt_type $idx) 32)
          (then
            ($printf_2 "RELEASE of unowned mv: 0x%x, idx: 0x%x\n" $mv $idx)
            ($exit 1)))
        (return)))

    ;; our reference count is not 0, so don't release
    (if (i32.ge_u ($MalVal_refcnt_type $idx) 32)
      (return))

    (block $done
      (block (block (block (block (block (block (block (block (block
      (br_table 0 0 0 0 1 1 2 2 3 0 4 4 5 6 7 8 8 $type))
      ;; nil, boolean, integer, float
      (br $done))
      ;; string, kw, symbol
      ;; release string, then FREE reference
      ($RELEASE_STRING $mv)
      (br $done))
      ;; list, vector
      (if (i32.ne ($MalVal_val $idx 0) 0)
        (then
          ;; release next element and value
          ($RELEASE ($MEM_VAL0_ptr $mv))
          ($RELEASE ($MEM_VAL1_ptr $mv))))
      (br $done))
      ;; hashmap
      (if (i32.ne ($MalVal_val $idx 0) 0)
        (then
          ;; release next element, value, and key
          ($RELEASE ($MEM_VAL0_ptr $mv))
          ($RELEASE ($MEM_VAL2_ptr $mv))
          ($RELEASE ($MEM_VAL1_ptr $mv))))
      (br $done))
      ;; mal / macro function
      ;; release ast, params, and environment
      ($RELEASE ($MEM_VAL2_ptr $mv))
      ($RELEASE ($MEM_VAL1_ptr $mv))
      ($RELEASE ($MEM_VAL0_ptr $mv))
      (br $done))
      ;; atom
      ;; release contained/referred value
      ($RELEASE ($MEM_VAL0_ptr $mv))
      (br $done))
      ;; env
      ;; if outer is set then release outer
      (if (i32.ne ($MalVal_val $idx 1) 0)
        ($RELEASE ($MEM_VAL1_ptr $mv)))
      ;; release the env data (hashmap)
      ($RELEASE ($MEM_VAL0_ptr $mv))
      (br $done))
      ;; metadata
      ;; release object and metdata object
      ($RELEASE ($MEM_VAL0_ptr $mv))
      ($RELEASE ($MEM_VAL1_ptr $mv))
      (br $done))
      ;; default/unknown
    )

    ;; FREE, free the current element

    ;; set type(FREE/15) and size
    ;;; mv->refcnt_type = size*32 + FREE_T
    (i32.store $mv (i32.add (i32.mul_u $size 32) (get_global $FREE_T)))
    (i32.store ($MalVal_val_ptr $idx 0) (get_global $mem_free_list))
    (set_global $mem_free_list $idx)
    (if (i32.ge_u $size 3) (i32.store ($MalVal_val_ptr $idx 1) 0))
    (if (i32.eq $size 4) (i32.store ($MalVal_val_ptr $idx 2) 0))
  )

  ;; Allocate a string as follows:
  ;; refcnt (i32 set to 1), string data, NULL byte
  (func $STRING_DUPE (param $str i32) (result i32)
    (local $len i32 $cur i32 $new i32 $idx i32)

    ;; Calculate length of string needed
    (set_local $len ($strlen $str))

    ;; leading i32 refcnt + trailing NULL
    (set_local $new ($malloc (i32.add 5 $len)))

    ;; set initial refcnt to 1
    (i32.store $new 1)
    ;; skip refcnt
    (set_local $cur (i32.add $new 4))
    ;; Set NULL terminator
    (i32.store8_u (i32.add $cur $len) 0)

    ;; Copy the characters
    ($memmove $cur $str $len)
    $new
  )

  ;; Duplicate regular character array string into a Mal string and
  ;; return the MalVal pointer
  (func $STRING (param $type i32 $str i32) (result i32)
    ($ALLOC_SCALAR $type ($STRING_DUPE $str))
  )

  (func $RELEASE_STRING (param $mv i32)
    (local $str i32)
    (set_local $str ($MalVal_val ($IDX $mv) 0))

    ;; DEBUG
;;    ($printf_1 "RELEASE_STRING - calling free on: %d" $str)

    ($free $str)
  )
)
