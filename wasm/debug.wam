(module $debug

  (func $PR_VALUE (param $fmt i32) (param $mv i32)
    (local $temp i32)
    (set_local $temp ($pr_str $mv))
    ($printf_1 $fmt ($to_String $temp))
    ($RELEASE $temp)
  )

  (func $PR_MEMORY_VALUE (param $idx i32) (result i32)
    (local $mv i32)
    (local $type i32)
    (local $size i32)
    (local $val0 i32)
    ;;; mv = mem + idx
    (set_local $mv ($MalVal_ptr $idx))
    (set_local $type ($TYPE $mv))
    (set_local $size ($MalVal_size $mv))
    (set_local $val0 ($MalVal_val $idx 0))

    ;;; printf(" %3d: type: %2d", idx, type)
    ($printf_2 " 0x%x: type: %d" $idx $type)

    (if (i32.eq $type 15)
      (then
        ;;; printf(", size: %2d", size)
        ($printf_1 ", size: %d" $size))
      (else
        ;;;  printf(", refs: %2d", (mv->refcnt_type - type)>>5)
        ($printf_1 ", refs: %d" ($REFS $mv))))

    ;;; printf(", [ %3d | %3d", mv->refcnt_type, val0)
    ($printf_2 ", [ 0x%x | 0x%x" ($MalVal_refcnt_type $idx) $val0)

    (if (i32.eq $size 2)
      (then
        ($print " | --- | --- ]"))
      (else
        ;;; printf(" | %3d", mv->val[1])
        ($printf_1 " | 0x%x" ($MalVal_val $idx 1))
        (if (i32.eq $size 3)
          (then
            ($print " | --- ]"))
          (else
            ;;; printf(" | %3d ]", mv->val[2])
            ($printf_1 " | 0x%x ]" ($MalVal_val $idx 2))))))

    ;;; printf(" >> ")
    ($print " >> ")

    (block $done (block $unknown
      (block (block (block (block (block (block (block (block
      (block (block (block (block (block (block (block (block
        (br_table 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
                  $unknown $type))
      ;; 0: nil
      ($print "nil")
      (br $done))
      ;; 1: boolean
      (if (i32.eq $val0 0)
        ;; true
        ($print "false")
        ;; false
        ($print "true"))
      (br $done))
      ;; 2: integer
      ($printf_1 "%d" $val0)
      (br $done))
      ;; 3: float/ERROR
      ($print " *** GOT FLOAT *** ")
      (br $done))
      ;; 4: string/kw
      ($printf_1 "'%s'" ($to_String $mv))
      (br $done))
      ;; 5: symbol
      ($print ($to_String $mv))
      (br $done))
      ;; 6: list
      (if (i32.le_u $mv (get_global $EMPTY_HASHMAP))
        (then
          ($print "()"))
        (else
          ;;; printf("(... %d ...), next: %d\n", mv->val[1], mv->val[0])
          ($printf_2 "(... 0x%x ...), next: 0x%x"
                     ($MalVal_val $idx 1)
                     ($MalVal_val $idx 0))))
      (br $done))
      ;; 7: vector
      (if (i32.le_u $mv (get_global $EMPTY_HASHMAP))
        (then
          ($print "[]"))
        (else
          ;;; printf("[... %d ...], next: %d\n", mv->val[1], mv->val[0])val
          ($printf_2 "[... %d ...], next: %d"
                     ($MalVal_val $idx 1)
                     ($MalVal_val $idx 0))))
      (br $done))
      ;; 8: hashmap
      (if (i32.le_u $mv (get_global $EMPTY_HASHMAP))
        (then
          ($print "{}"))
        (else
          ;;; printf("{... '%s'(%d) : %d ...}\n",
          ;;         to_String(mem + mv->val[1]), mv->val[1], mv->val[2])
          ($printf_3 "{... '%s'(%d) : %d ...}"
                     ($to_String ($MalVal_ptr ($MalVal_val $idx 1)))
                     ($MalVal_val $idx 1)
                     ($MalVal_val $idx 2))))
      (br $done))
      ;; 9: function
      ($print "function")
      (br $done))
      ;; 10: mal function
      ($print "mal function")
      (br $done))
      ;; 11: macro fn
      ($print "macro fn")
      (br $done))
      ;; 12: atom
      ($print "atom")
      (br $done))
      ;; 13: environment
      ($print "environment")
      (br $done))
      ;; 14: metadata
      ($print "metadata")
      (br $done))
      ;; 15: FREE
      ($printf_1 "FREE next: 0x%x" $val0)
      (if (i32.eq $idx (get_global $mem_free_list))
        ($print " (free start)"))
      (if (i32.eq $val0 (get_global $mem_unused_start))
        ($print " (free end)"))
      (br $done))
      ;; 16: unknown
      ($print "unknown")
    )

    (drop ($putchar 0xA))

    (i32.add $size $idx)
  )

  (func $PR_MEMORY (param $start i32) (param $end i32)
    (local $idx i32)
    (if (i32.lt_s $start 0)
      (set_local $start (get_global $mem_user_start)))
    (if (i32.lt_s $end 0)
      (set_local $end (get_global $mem_unused_start)))
    ;;; printf("Values - (mem) showing %d -> %d", start, end)
    ;;; printf(" (unused start: %d, free list: %d):\n",
    ;;;        mem_unused_start, mem_free_list)
    ($printf_4 "Values - (mem) showing 0x%x -> 0x%x (unused start: 0x%x, free list: 0x%x):\n"
          $start
          $end
          (get_global $mem_unused_start)
          (get_global $mem_free_list))

    (if (i32.le_s $end $start)
      (then
        ($print "  ---\n")
        (set_local $end (get_global $mem_unused_start)))
      (else
        (set_local $idx $start)
        ;;; while (idx < end)
        (block $loopvals_exit
          (loop $loopvals
            (if (i32.ge_s $idx $end)
              (br $loopvals_exit))
            (set_local $idx ($PR_MEMORY_VALUE $idx))
            (br $loopvals)
          )
        )))
  )

  (func $PR_MEMORY_RAW (param $start i32) (param $end i32)
    (block $loop_exit
      (loop $loop
        (if (i32.ge_u $start $end) (br $loop_exit))
        ($printf_2 "0x%x 0x%x\n" $start (i32.load $start))
        (set_local $start (i32.add 4 $start))
        (br $loop)
      )
    )
  )
)
