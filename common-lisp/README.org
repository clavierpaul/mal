* Implementation of MAL in Common Lisp

** Introduction

This is a reasonably portable implementation of MAL in Common Lisp. It has been
tested to work with following Common Lisp implementations

- Steel Bank Common Lisp ([[http://sbcl.org/]])
- Clozure Common Lisp ([[http://ccl.clozure.com/]])
- CMU Common Lisp ([[https://www.cons.org/cmucl/]])
- GNU CLISP ([[http://www.clisp.org/]])
- Embeddable Common Lisp ([[https://common-lisp.net/project/ecl/]])
- Allegro CL ([[http://franz.com/products/allegro-common-lisp/]])

[[http://www.cliki.net/cl-launch][cl-launch]] to build command line runnable scripts/images for the above
implementations.

** Dependencies

*** [[http://www.cliki.net/cl-launch][cl-launch]]
    For building command line executable scripts

*** [[https://www.quicklisp.org/beta/][quicklisp]]
    For installing dependencies

*** ~readline~ (~libreadline-dev~ on Ubuntu)
    For readline integration. If you wish to run the implementation using Allegro
    CL, you will also have to install the 32 bit version of readline
    (~lib32readline-dev~ on Ubuntu)
*** (Optional) ~asdf~ (~cl-asdf~ on Ubuntu)
    This is needed if you want to run the implementation using GNU CLISP, since
    GNU CLISP does not ship with ~asdf~ and ~cl-launch~ depends on it.

** Running using different implementations

By default the MAL is built using ~sbcl~, you can control this using ~LISP~
environment variable. The variable should be set to the cl-launch "nickname" for
implementation. The nicknames that work currently are

|------------------------+----------|
| Implementation         | Nickname |
|------------------------+----------|
| Steel Bank Common Lisp | sbcl     |
| Clozure Common Lisp    | ccl      |
| CMU Common Lisp        | cmucl    |
| GNU CLISP              | clisp    |
| Embeddable Common Lisp | ecl      |
| Allegro CL             | allegro  |
|------------------------+----------|

For example to build with GNU CLISP, you need to do the following

#+BEGIN_SRC sh
  cd common-lisp ; LISP=clisp make
#+END_SRC

You can control the implementation binary used for the build using environment
variables.  For a given implementation nickname, the environment variable will
be the capitalization of the given nickname.

|------------------------+-------------|
| Implementation         | Binary Path |
|------------------------+-------------|
| Steel Bank Common Lisp | SBCL        |
| Clozure Common Lisp    | CCL         |
| CMU Common Lisp        | CMUCL       |
| GNU CLISP              | CLISP       |
| Embeddable Common Lisp | ECL         |
| Allegro CL             | ALLEGRO     |
|------------------------+-------------|

For example to build MAL with Clozure CL installed in
~\~/.roswell/impls/x86-64/linux/ccl-bin/1.11/lx86cl64~, you need to do the
following

#+BEGIN_SRC sh
  cd common-lisp ; LISP=ccl CCL=~/.roswell/impls/x86-64/linux/ccl-bin/1.11/lx86cl64 make
#+END_SRC

You can use the variables ~*cl-implementation*~ and ~*cl-version*~ can be used
to in MAL REPL to check the Common Lisp implementation and the version used for
building it.

** Interop

There is some basically interop in the form ~cl-eval~ which takes a string and
evaluates it as Common Lisp code, the result is returned in form of a MAL value,
you are limited to code that produces values that have MAL counterparts.
