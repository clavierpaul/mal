(de pr-str (Ast PrintReadably)
   (let Value (MAL-value Ast)
      (case (MAL-type Ast)
         ((true false nil)
          (sym @) )
         (string (if PrintReadably (if Value (sym Value) "\"\"") Value))
         (keyword (pack ":" Value))
         ((number symbol) Value)
         (list (pr-list Value PrintReadably "(" ")"))
         (vector (pr-list Value PrintReadably "[" "]"))
         (map (pr-list Value PrintReadably "{" "}"))
         (T (throw 'err (MAL-error "[pr-str] unimplemented type"))) ) ) )

(de pr-list (Forms PrintReadably Starter Ender)
   (let Values (mapcar '((Form) (pr-str Form PrintReadably)) Forms)
      (pack Starter (glue " " Values) Ender) ) )
